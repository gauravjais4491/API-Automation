{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-20T10:11:27.897Z",
    "end": "2023-09-20T10:11:28.026Z",
    "duration": 129,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3e1969c0-1388-409a-bc24-d9766b1b9a38",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 43,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "userId = await createUser();",
          "err": {},
          "uuid": "c5939bdd-e81e-440c-ae96-0afb0336000a",
          "parentUUID": "3e1969c0-1388-409a-bc24-d9766b1b9a38",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 6,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "userId = await createUser();",
          "err": {},
          "uuid": "bdf11620-7891-4245-ac6b-b55947237528",
          "parentUUID": "3e1969c0-1388-409a-bc24-d9766b1b9a38",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "userId = await createUser();",
          "err": {},
          "uuid": "afb014bb-b637-401b-9c44-cd7b6bda775c",
          "parentUUID": "3e1969c0-1388-409a-bc24-d9766b1b9a38",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "816225e5-8c12-40e7-825c-8e0625c59be0",
          "title": "Create User",
          "fullFile": "/Users/user/Desktop/API Automation/test/createUser.js",
          "file": "/test/createUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user profile with username, email, age",
              "fullTitle": "Create User should create user profile with username, email, age",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    name: \"Rohit Sharma\",\n    email: \"rohit@example.com\",\n    age: 34\n}\nconst response = await axios.post(App_Url + \"/postUserInfo\", payload)\nexpect(response.status).to.be.equal(201)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "cdea9df1-a90c-43ed-9153-abab1efea93a",
              "parentUUID": "816225e5-8c12-40e7-825c-8e0625c59be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create user profile without username",
              "fullTitle": "Create User should create user profile without username",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const payload = {\n        email: \"rohit@example.com\",\n        age: 34\n    }\n    const response = await axios.post(App_Url + \"/postUserInfo\", payload)\n    expect(response.status).not.to.be.equal(201)\n    expect(response.data).to.be.an('object')\n} catch (error) {\n    if (error.response) {\n        expect(error.response.status).not.to.be.equal(201)\n    }\n    else {\n        throw error;\n    }\n}",
              "err": {},
              "uuid": "3fde9507-3a5c-42bf-a998-fd552382cb0f",
              "parentUUID": "816225e5-8c12-40e7-825c-8e0625c59be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create user profile without e-mail",
              "fullTitle": "Create User should create user profile without e-mail",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const payload = {\n        name: \"Rohit Sharma\",\n        age: 34\n    }\n    const response = await axios.post(App_Url + \"/postUserInfo\", payload)\n    expect(response.status).not.to.be.equal(201)\n    expect(response.data).to.be.an('object')\n} catch (error) {\n    if (error.response) {\n        expect(error.response.status).not.to.be.equal(201)\n    }\n    else {\n        throw error;\n    }\n}",
              "err": {},
              "uuid": "d843909b-2dc0-472b-a2cf-4c594a9aa04e",
              "parentUUID": "816225e5-8c12-40e7-825c-8e0625c59be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create user profile without age name",
              "fullTitle": "Create User should create user profile without age name",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const payload = {\n        name : \"Rohit Sharma\",\n        email: \"rohit@example.com\"\n    }\n    const response = await axios.post(App_Url + \"/postUserInfo\", payload)\n    expect(response.status).not.to.be.equal(201)\n    expect(response.data).to.be.an('object')\n} catch (error) {\n    if (error.response) {\n        expect(error.response.status).not.to.be.equal(201)\n    }\n    else {\n        throw error;\n    }\n}",
              "err": {},
              "uuid": "9825af91-3183-40e2-a458-39bd5f5c13b8",
              "parentUUID": "816225e5-8c12-40e7-825c-8e0625c59be0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cdea9df1-a90c-43ed-9153-abab1efea93a",
            "3fde9507-3a5c-42bf-a998-fd552382cb0f",
            "d843909b-2dc0-472b-a2cf-4c594a9aa04e",
            "9825af91-3183-40e2-a458-39bd5f5c13b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "492bebee-f598-42e5-83cf-34cee9fb7ab8",
          "title": "Delete User",
          "fullFile": "/Users/user/Desktop/API Automation/test/deleteUser.js",
          "file": "/test/deleteUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete user",
              "fullTitle": "Delete User should delete user",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.delete(App_Url + \"/deleteUserInfo/\" + userId._id)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "2c1cebaa-9b61-433f-80f6-8cf122ce1a39",
              "parentUUID": "492bebee-f598-42e5-83cf-34cee9fb7ab8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c1cebaa-9b61-433f-80f6-8cf122ce1a39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9da85ac-cae3-4a2e-a6f7-206c3c117c6d",
          "title": "Get User",
          "fullFile": "/Users/user/Desktop/API Automation/test/getUser.js",
          "file": "/test/getUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all user info",
              "fullTitle": "Get User should get all user info",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(App_Url + \"/getUserInfo\")\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('Array')",
              "err": {},
              "uuid": "e92ee85c-e74b-4ce1-8993-ff802ba52441",
              "parentUUID": "c9da85ac-cae3-4a2e-a6f7-206c3c117c6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get single user info",
              "fullTitle": "Get User should get single user info",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(App_Url + \"/getSingleUserInfo/\" + userId._id)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "ade5fa76-1e54-4729-ae5d-0c583fed74fc",
              "parentUUID": "c9da85ac-cae3-4a2e-a6f7-206c3c117c6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have all the property of user",
              "fullTitle": "Get User should have all the property of user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(App_Url + \"/getSingleUserInfo/\" + userId._id)\nresponse.data.should.have.property(\"name\")\nresponse.data.should.have.property(\"email\")\nresponse.data.should.have.property(\"age\")\nexpect(response.data.name).to.be.equal(\"Puja Kumari\")\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "6ca814ce-bf2d-491b-a86b-f7f207dd6b3f",
              "parentUUID": "c9da85ac-cae3-4a2e-a6f7-206c3c117c6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e92ee85c-e74b-4ce1-8993-ff802ba52441",
            "ade5fa76-1e54-4729-ae5d-0c583fed74fc",
            "6ca814ce-bf2d-491b-a86b-f7f207dd6b3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "50d904ae-e647-47c4-a69f-beca8b37228f",
          "title": "Update User",
          "fullFile": "/Users/user/Desktop/API Automation/test/updateUser.js",
          "file": "/test/updateUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user profile with username, email, age",
              "fullTitle": "Update User should update user profile with username, email, age",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    name: \"kuldeep Yadav\",\n    email: \"kuldeep@example.com\",\n    age: 34\n}\nconst response = await axios.put(App_Url + \"/updateUserInfo/\" + userId._id, payload)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "31216651-ab6c-4fa3-9b46-cc24d6f1573e",
              "parentUUID": "50d904ae-e647-47c4-a69f-beca8b37228f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user profile with e-mail",
              "fullTitle": "Update User should update user profile with e-mail",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email: \"sarukh@example.com\",\n}\nconst response = await axios.put(App_Url + \"/updateUserInfo/\" + userId._id, payload)\nexpect(response.status).not.to.be.equal(201)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "adb2379c-1479-415d-a008-9747061024e5",
              "parentUUID": "50d904ae-e647-47c4-a69f-beca8b37228f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user profile with age",
              "fullTitle": "Update User should update user profile with age",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    age: 120\n}\nconst response = await axios.put(App_Url + \"/updateUserInfo/\" + userId._id, payload)\nexpect(response.status).not.to.be.equal(201)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "fd390f64-7849-4d0f-8d9c-705d8182d977",
              "parentUUID": "50d904ae-e647-47c4-a69f-beca8b37228f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user profile with name",
              "fullTitle": "Update User should update user profile with name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    name: \"Salman Khan\",\n}\nconst response = await axios.put(App_Url + \"/updateUserInfo/\" + userId._id, payload)\nexpect(response.status).not.to.be.equal(201)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "883b84f3-24e2-4366-b2cc-1ae9dfa2754e",
              "parentUUID": "50d904ae-e647-47c4-a69f-beca8b37228f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user with wrong user id",
              "fullTitle": "Update User should update user with wrong user id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const payload = {\n        name: \"Virat Kohli\",\n        email: \"virat@example.com\",\n        age: 34\n    }\n    const response = await axios.put(App_Url + \"/updateUserInfo/\" + 1234567, payload)\n    expect(response.status).not.to.be.equal(200)\n    expect(response.data).to.be.an('object')\n} catch (error) {\n    if (error.response) {\n        expect(error.response.status).not.to.be.equal(200)\n    }\n    else {\n        throw error;\n    }\n}",
              "err": {},
              "uuid": "f83d0091-75ec-4cc6-a4bc-19efb902ce8c",
              "parentUUID": "50d904ae-e647-47c4-a69f-beca8b37228f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user profile with new e-mail",
              "fullTitle": "Update User should update user profile with new e-mail",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email: \"sarukh@example.com\",\n}\nconst response = await axios.put(App_Url + \"/updateUserInfo/\" + userId._id, payload)\nexpect(response.status).not.to.be.equal(201)\nexpect(response.data.email).to.be.equal(\"sarukh@example.com\")",
              "err": {},
              "uuid": "6bedf08b-4f2e-4872-adfb-3003bf1ea292",
              "parentUUID": "50d904ae-e647-47c4-a69f-beca8b37228f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31216651-ab6c-4fa3-9b46-cc24d6f1573e",
            "adb2379c-1479-415d-a008-9747061024e5",
            "fd390f64-7849-4d0f-8d9c-705d8182d977",
            "883b84f3-24e2-4366-b2cc-1ae9dfa2754e",
            "f83d0091-75ec-4cc6-a4bc-19efb902ce8c",
            "6bedf08b-4f2e-4872-adfb-3003bf1ea292"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}